shinyfeedback
waiter
shinyvalidate
shinymaterial
shiny.semantic
thematic
progress


package 	version 	source
gapminder 	0.3.0 	standard (@0.3.0)
ggforce 	0.3.2 	standard (@0.3.2)
globals 	0.14.0 	standard (@0.14.0)
openintro 	2.0.0 	standard (@2.0.0)
shiny 	1.5.0.9005 	Github (rstudio/shiny@39454a6)
shinycssloaders 	1.0.0 	standard (@1.0.0)
shinyFeedback 	0.3.0 	standard (@0.3.0)
shinythemes 	1.1.2 	standard (@1.1.2)
testthat 	3.0.0 	standard (@3.0.0)
thematic 	0.1.1 	Github (rstudio/thematic@c05ca53)
tidyverse 	1.3.0 	standard (@1.3.0)
vroom 	1.3.2 	standard (@1.3.2)
waiter 	0.1.3 	standard (@0.1.3)
xml2 	1.3.2 	standard (@1.3.2)
zeallot 	0.1.0 	standard (@0.1.0)




Shiny in prod:
https://rstudio.com/resources/rstudioconf-2019/shiny-in-production-principles-practices-and-tools/

Work Flow:
options(shiny.autoreload = TRUE)


Input limits:
For example, to allow up to 10 MB run options(shiny.maxRequestSize = 10 * 1024^2).

Buttons:
upload and download buttons have a class argument that can be used to style the button.
like so:  actionButton("eat", "Eat me!", class = "btn-block")

Downloading Reports:
https://shiny.rstudio.com/articles/generating-reports.html

http://www.useit.com/alertbox/ok-cancel.html


Isolate note:
The use of isolate() is important. We’ll come back to exactly why it’s needed in Chapter XYZ, but it ensures that we don’t create a reactive dependency that would mean this code is re-run every time input$dynamic changes. We only want it to change when input$type or inpu$label changes.


The %||% (default value for NULL) operator is documented here.
https://rlang.r-lib.org/reference/op-null-default.html

